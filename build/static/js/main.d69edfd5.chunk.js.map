{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","components/Message.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","subTitle","react_default","a","createElement","className","Component","Form","allPopulated","fields","values","some","field","handleChange","e","target","name","value","setState","valid","validateInput","errors","config","msgInvalidInput","handleSubmit","preventDefault","input","console","log","getWeather","city","country","onSubmit","type","onChange","placeholder","Weather","Fragment","description","temperature","humidity","Message","content","API_KEY","process","units","App","isValidResponse","response","cod","capitaliseFirst","str","charAt","toUpperCase","slice","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","api_call","wrap","_context","prev","next","concat","fetch","sent","json","loading","data","errorMessage","message","stop","_x","apply","arguments","errorMessageInput","errorMessageAPI","appOutput","components_Message","components_Weather","main","temp","sys","weather","components_Titles","components_Form","validate","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d69edfd5.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\n\nclass Titles extends Component {\n\n  constructor(props) {\n    super(props) \n    this.state = {\n        title: 'Weather widget',\n        subTitle: `when the window is too far away!`\n    }\n  } \n  render() {\n    return (  \n      <div className=\"title-panel\">\n        <h1 className=\"title-panel__title\">{this.state.title}</h1>\n        <p className=\"title-panel__subtitle\">{this.state.subTitle}</p>\n      </div> \n    )\n  }\n}\n\nexport default Titles;","import React, { Component } from 'react'\nimport { isEmpty } from '../helpers/helpers';\nclass Form extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            fields: {\n                city: ''\n            },\n            valid: false\n        }\n        this.config = {\n            msgInvalidInput: \"Please provide a City!\"\n        }\n    }\n    \n    allPopulated = (fields) => Object.values(fields).some(field => field)\n\n    handleChange = (e) => {\n        let fields = this.state.fields;\n        // Set input value into field\n        fields[e.target.name] = e.target.value;\n        this.setState({ \n            valid: this.allPopulated(fields)\n        })\n    }\n\n    validateInput = () => {\n        const fields = this.state.fields;\n        this.setState({\n            valid: this.allPopulated(fields),\n            errors: this.config.msgInvalidInput\n        })\n        return this.state.valid;\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.validateInput();\n        // Only searching by city for now\n        const input = this.state.fields;\n        if( this.state.valid ){\n            this.props.getWeather(input);\n            return;\n        }\n        if ( !this.allPopulated(input) ) {\n            console.log('empty!')\n        }\n        return console.log('invalid');\n    }\n  \n    render() {\n        const bothFilled = this.allPopulated(this.state.fields.city, this.state.fields.country);\n         return (\n            <form onSubmit={this.handleSubmit}>\n           \n                <div className=\"form-group\">\n                    <input type=\"text\" name=\"city\" onChange={this.handleChange} placeholder=\"City\" className=\"form-control\"   />\n                 </div> \n                <div className=\"form-group\">\n                    <input type=\"submit\" value=\"Get weather\" className=\"button\" />\n                </div> \n            </form> \n        )\n    }\n}\n\nexport default Form","import React  from 'react';\n\nconst Weather = props => (\n    <>\n    { props.description && <p><strong>Description:</strong> { props.description} </p> }\n    { props.city && props.country && <p><strong>Location:</strong> { props.city}, {props.country } </p> }\n    { props.temperature && <p><strong>Temperature:</strong> { props.temperature}&deg;C</p> }\n    { props.humidity && <p><strong>Humidity:</strong> { props.humidity} </p> }\n    </>\n);\n\nexport default Weather;","import React  from 'react';\n\nconst Message = props => (\n    <div className=\"weatherform-feedback\">\n       <p>{props.content}</p>\n    </div>\n);\n\nexport default Message;","import React, { Component } from 'react' \nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather';\nimport Message from './components/Message';\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\nconst units = 'metric';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.config = {\n      errorMessageInput:  'Please enter a search',\n      errorMessageAPI:  'API error'\n    };\n    this.state = {}\n  }\n \n  isValidResponse = (response) => response.cod === 200;\n\n  capitaliseFirst = (str) => {\n    if (  typeof str !== 'string' ) return '';\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  \n  getWeather = async (fields) => {\n    console.log('Getting weather');\n    const city = fields.city;\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},UK&appid=${API_KEY}&units=${units}`;\n    \n    // Await the data\n    const api_call = await fetch(url)\n    const response = await api_call.json();\n    this.setState({\n      loading: false,\n      data: response || null,\n      errorMessage: response.message ? `${ this.capitaliseFirst(response.message) }. Keep searching!` : null\n    })\n  };\n\n  render() {\n    // Will be Weather report or message message component\n    let appOutput;\n    let data = this.state.data;\n    // Check for invalid data returned\n    if (this.state.errorMessage || !data) { \n      const { errorMessage } = this.state\n      appOutput = \n        <Message content={errorMessage}  />\n    } else {\n      appOutput =  \n        <Weather \n          temperature={data.main.temp}\n          city={data.name} \n          country={data.sys.country} \n          description={ this.capitaliseFirst( data.weather[0].description) } \n          humidity={data.main.humidity}\n        /> \n    }\n \n    return (\n    <div className=\"main\">\n      <div className=\"content\">  \n          <Titles />\n          <div className=\"weather-panel\">\n            <Form getWeather={this.getWeather} validate  />\n            <div className=\"weatherform-feedback\"> \n              <div className=\"weatherform-feedback__content\">\n              {appOutput}\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}